//=======================================================================
// Author: Alexander Keddy
//
// Copyright 2015 Alexander Keddy
//
// This file is part of GenGIS.
//
// GenGIS is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// GenGIS is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with GenGIS.  If not, see <http://www.gnu.org/licenses/>.
//=======================================================================

#ifndef _GENGIS_CARTOGRAM_
#define _GENGIS_CARTOGRAM_

#include "../core/Precompiled.hpp"
#include "../utils/StringTools.hpp"
#include "../core/MapView.hpp"

//#include "../utils/cart.h"
//#include "../utils/Cart.hpp"
extern "C" {
//	#include <cart.h>
	#include "../utils/cart.h"
}
/* The parameter OFFSET specifies a small amount to be added the density in
 * every grid square, as a Fraction of the mean density on the whole
 * lattice.  This prevents negative densities from being generated by
 * numerical errors in the FFTs which can cause problems for the
 * integrator.  If the program is giving weird behavior, particularly at
 * the beginning of a calculation, try increasing this quantity by a factor
 * of 10.
 */

#define OFFSET 0.005

namespace GenGIS
{
	class Cartogram
	{
	public:
		explicit Cartogram();
		explicit Cartogram(float x, float y);

		void MakeCartogram();
	private:
		const int ysize;
		const int xsize;
		/** Copied directly from MapView. See class for more information. */
		int m_dimension;
		MapControllerPtr m_mapController;
		std::vector<float> gridx;
		std::vector<float> gridy;

		std::vector<std::vector<float>> grid;
		MapView::Vertex* m_vertices;
		
		/** Translate the first location set Lat/Lon to Raster Grid coordinates. */
		std::map<int,int> TranslateLocations();
		bool BoxBound(Point2D botRight, Point2D topLeft, Point2D loc);
		void WriteMatrix(double ** rho, int row, int col, std::string name);
		void StdMain();
		int readpop(FILE *stream, double **rho, int xsize, int ysize);
		void writepoints(FILE *stream, double *gridx, double *gridy, int npoints);
		int readpoints(FILE *stream, double **gridx, double **gridy, int xsize, int ysize);

		/** Create the density matrix for input into Cart. */
		void MakeDensityMatrix();
		
		/** Create the Rho Matrix. */
		void MakeRho();

		/** Get the average density value for all locations.
			This will be used to fill in empty spots in the grid*/
		int GetMapAverage(std::map<int,int> map);

		/** Create grid of density values. */
		void CreateGrid(double *gridx, double *gridy, int xsize, int ysize);

		/** Populate the grid of density values.*/
		void PopulateRho( double ** rho );
		
		/** Interpolate between standard Raster coordinates and the cartogram.*/
		void Interpolate(double** gridx, double** gridy);

		/** Interpolate locations from standard raster to cartogram coordinates. */
		void InterpolateLocations(double ** gridx, double** gridy);
		
		/** Transform a 1D array to a 2D array in order to move between Cart and Interp steps. */
		double ** ArrayTransform(double * grid);
	};
}
#endif